#!/bin/bash


set -e errexit 

[ ERR_CODE_STATUS ] 
{
    let "NO_ROOT_UID=0x3e8"  
    let "LOAD_CONF_FAILED=0X003"
    let "MEDIA_MAKE_DIR_ERR=0X004"
    let "ISO_EXT_NO_FOUND=0X005"
    let "FILE_NOT_FOUND=0x006"

}
declare -i  EXIT_SUCCESS=$((0x00))

readonly  import=source
conf=esd.cfg
$import  ${conf} 

[[  -f  ${conf} ]]  ||  { 
    echo  "need config file!!"
    exit ${LOAD_CONF_FAILED} 
}

[ UID_CHECK ] 
[[  ${UID}  -eq ${ALLOWED_X_UUID}  ]]   ||  { 
    echo -e "require root user !! exiting with SIG_ERR  ${NO_ROOT_UID}"
    exit ${NO_ROOT_UID} 
}

[ @PRIVATE ] 
{
    build_array_form() {
        if [[ -z $1  ]] ; then 
            echo -e "require  character separator partition"
        fi
    } 
    
    unmout_device  ()  {
        if [[ -n  $1  ]]  ; then  
            $( umount -f  $1 ) 
            test  $? -eq 0  && {
                (rm  -r ${MOUNT_TARGET})  
                 [[ $? -eq 0 ]]  ||   {
                  echo -e "cannot remove device  resource  is busy " 
                  exit $? 
                }  
            }|| {
                echo -e  "failed to umount the device exiting "   
                read -p " hit the key board to exit"  
                [[  -n ${REPLY}  ]]  && exit 2
            }
        else  
            exit 12 
        fi
    }

}

#------------------------------------------------
# check 
device_partition  ()  { 
    #  get the current device partitions in the system 
    local  device_section=$(blkid | cut -d  : -f1)
    echo ${device_section}
} 
 
IFS=" " read -a partions <<< $(device_partition)
declare actual_partitions_size=${#partions[@]} #  get devices entry point 

declare  current_dev  # pluged  usb divice block  /dev/xxx  

hotreload() {  #+  trun on background  until  the usb device is pluged  into the computer  
    local  analizing_timestamp=110
    local  percentage=0
    
    while [[ true ]] ; do
         IFS=" "  read  -a  dev  <<< $(device_partition)
         echo  ${#dev[*]}
         #echo  ${actual_partitions_size} 
         if [[  ${actual_partitions_size} -eq  ${#dev[@]} ]] ; then 
             ($tui --title  "usboot" \
                   --infobox "waiting for USB device  [ press CTRL + c to abort] "  5 54)
             sleep $USB_LED_SIG_FREQ

         elif  [[  ${actual_partitions_size} -lt  ${#dev[@]}  ]] ; then  
            # analyzing usb device  
            (
            while [[  $percentage -ne  $analizing_timestamp ]]  ; do  
                echo $percentage  
                echo  "###" 
                echo "$percentage %" 
                echo "###"
                ((percentage+=10)) 
                sleep 1
            done ) | ($tui --title "USB driver analysing" \
                           --gauge "Analysing device ... " 10 60)
            
            current_dev=${dev[-1]} # get the latest device pluged in the system   
            break 
        elif  [[  ${actual_partitions_size}  -gt  ${#dev[@]}  ]] ; then 
              # refresh the locate block  device attribute  
              notify-send --urgency=normal "please replug your device"
              IFS=" " read  -a   block_device  <<<  $(device_partition)
              actual_partitions_size=${#block_device[@]}
        fi
    done 
}
#hotreload

# TODO  
# []  unmount  the usb device
make_mount_point ()  {  #  
    if [[  ! -d ${MOUNT_TARGET} ]]  ; then  
        $(mkdir  ${MOUNT_TARGET})
        test $? -eq $((0x00))   ||   {
            echo -e  "media maker failed  SIG_ERR  ${MEDIA_MAKE_DIR_ERR}" 
            exit ${MEDIA_MAKE_DIR_ERR} 
        } && {
            echo "mounted"
        }
    fi 
    # chech  if  the device existe in the system 
    IFS=" " read -a  is_device_stay_pluged <<< $(device_partition) 
    current_dev=${is_device_stay_pluged[-1]} 
    if  [[ -n $current_dev  ]] ;then  
        $(mount $current_dev  ${MOUNT_TARGET}) 
         [[  $? -eq  0  ]] && {
            # notification signal  
            if [[ -x  ${uBIN}${NOTIFICATION} ]] ; then   
                notify-send  "device successfully mounted" 
             else  
                echo "device successfully mounted"  
            fi 
    }
   # else i
   #     $(umount $current_dev) 
   #   $(rm -r ${MOUNT_TARGET})  
    fi 
}

#make_mount_point 

declare  g_output_fd
us_boot_main_menu () {
     g_output_fd=$(${tui} --title " usBoot Menu" \
            --backtitle $(basename $0) \
            --menu  " Choose your operation :" 15 55 5 \
            1 "USB Bootable Drive" \
            2 "Formating USB Driver" \
            3 "Check USB Driver Storage" \
            4 "Reversing USB Driver" \
            5 "Exit -> " \
            --output-fd 1)
}

#us_boot_main_menu
#echo ${g_output_fd}

# MAKING USB BOOTABLE  DRIVE 
# => get the file iso emplacement  
# => pairing the iso with the usb partition  
[  UNIVERSAL_SERIAL_BOOTABLE  ]  
{

usb_bootable_driver () { #  -<  create usb bootable device  >-  
        # select file iso  
        iso_path_file=$($tui --backtitle $(basename $0) \
                        --title  "select your iso  file " \
                        --fselect ${HOME}  15 50  \
                        --output-fd 1)
         
        if [[ -n $iso_path_file ]] && [[ -f  $iso_path_file ]] ; then
           
            #  check  if the file is iso forma
            local  iso_file_extension=${iso_path_file##*.}
            
            #TODO : [] analize the iso  file   check the boot sector 

            [[   $iso_file_extension  == "iso"   ]]  ||  {
                    echo  " no iso format found  SIG ERR ${ISO_EXT_NO_FOUND}"
                    exit ${ISO_EXT_NO_FOUND}
            } && {
                declare  -r  input_file=${iso_path_file}
                declare  -r  output_target=${current_dev}
                if  [[ -z ${current_dev} ]]  ;  then 
                         echo -e  "ERROR : NO MEDIA DEVICE  FOUND  aborting" 
                         exit  234 
                fi
                
                $(dd  bs=${RW_BYTES} \
                       if=${input_file} \
                       of=${output_target} \
                       oflag=${FLAGS} \
                       status=progress) 
                [[  $?  -eq 0  ]] && {
                     echo  -e " [ dOnNnnE]" 
                     exit  0 
                }||{
                    echo  -e "some get catched while  building bootable usb" 
                    exit 1
                }
            
            }
            
        else 
            echo -e "file not found  in your system  " 
            exit ${FILE_NOT_FOUND}
        fi  

        
        
}  # -<     usb_bootable_driver   >- 

format_serial_device()  {  # -<  formating  seriale device -> 

   # umount the device
   if [[  -n  ${current_dev}  ]]   ; then 
       
        $(umount -f  ${current_dev}) 
        #$(umount -f  ${MOUNT_TARGET})  
        [[ $? -eq $((0x00)) ]] && {
            $tui --infobox  "Processing  , please wait ..." 5 35  ; sleep $((0x003))   
            # make  choice to select new file system 
            build_fs=$($tui  --title "Serial  device Format" \
                             --backtitle $(basename $0) \
                             --radiolist  "file sys recorver" 20 40 15 \
                             ext4    ext4    on  \
                             fat     fat     off \
                             cramfs  cramfs  off \
                             msdos   msdos   off \
                             jfs     jfs     off \
                             ext3    ext3    off \
                             ext2    ext2    off \
                             minix   minix   off \
                             bfs     bfs     off \
                             exfat   exfat   off \
                             ntfs    ntfs    off \
                             reiser4 reiser4 off \
                             xfs     xfs     off \
                             vfat    vfat    off \
                             --output-fd 1 ) 

            #  install  the fs  in  serial device  
            $(mkfs -t ${build_fs}  ${current_dev}) 
            test $? -eq $((0x00))  && {
                notify-send  "formating done with  ${build_fs} file sys  "  
                exit 3 
            } || { 
                notify-send  "fail to format the device  " 
                exit 3  
            } 
        } || {
            echo -e "failed  to  umount  your device"  
            exit  $? 
        }
    else  
         echo  -e  "Undefine device section"
      
    fi



}  # -<     format_serial_device  >-

}  # -< UNIVERSAL_SERIAL_BOOTABLE >-

_::main::_ ()  {
    hotreload 
    make_mount_point  
    
    us_boot_main_menu
    case ${g_output_fd} in  
        "1") usb_bootable_driver ;;
        "2") format_serial_device ;;
        "5")  return ;;  
    esac
    return $EXIT_SUCCESS  
}

_::main::_
#always umount the device  at the end 
unmout_device
